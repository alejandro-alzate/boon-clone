name: Rust

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            rust: stable
            artifact_name: boon
            asset_name: boon-linux-amd64
          - os: windows-latest
            rust: stable
            artifact_name: boon.exe
            asset_name: boon-windows-amd64
          - os: macos-latest
            rust: stable
            artifact_name: boon
            asset_name: boon-macos-amd64

    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@master
    - name: Run build
      run: cargo build --release --verbose
    - name: Create release package
      if: github.ref == 'refs/heads/master' && matrix.rust == 'stable'
      run: |
        zip ${{ matrix.asset_name }}.zip LICENSE README.md target/release/${{ matrix.artifact_name }}
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: latest
        draft: false
        prerelease: false
    - name: Upload release
      id: upload_release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip
