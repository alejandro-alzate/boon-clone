jobs:
  - job: 'Build'
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          target: 'x86_64-pc-windows-msvc'
          rustup_toolchain: stable
        mac-stable:
          imageName: 'macos-10.13'
          target: 'x86_64-apple-darwin'
          rustup_toolchain: stable
        linux-stable:
          imageName: 'ubuntu-16.04'
          target: 'x86_64-unknown-linux-gnu'
          rustup_toolchain: stable

    pool:
      vmImage: $(imageName)

    steps:
      - template: '_build/install-rust.yml'
      - script: |
          rustup target add %TARGET%
          cargo build --release --all --target %TARGET%
        displayName: "Windows - Build (64-bit)"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          rustup target add $TARGET
          cargo build --release --all --target $TARGET
        displayName: "Build (64-bit)"
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: |
          set MY_TAG=latest
          echo %MY_TAG%
          echo "##vso[task.setvariable variable=build.my_tag]%MY_TAG%"
        displayName: "Windows - Create tag variable"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          for /f %%x in ('wmic path win32_localtime get /format:list ^| findstr "="') do set %%x
          set DATE=%Year%-%Month%-%Day%
          echo %DATE%
          echo "##vso[task.setvariable variable=build.date]%DATE%"
        displayName: "Windows - Create date variable"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - bash: |
          MY_TAG="latest"
          echo $MY_TAG
          echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
        displayName: "Create tag variable"
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - bash: |
          DATE="$(date +%Y-%m-%d)"
          echo "##vso[task.setvariable variable=build.date]$DATE"
        displayName: "Create date variable"
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - task: CopyFiles@2
        displayName: Copy assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
          contents: |
            boon
            boon.exe
          targetFolder: '$(Build.BinariesDirectory)/boon'
      - task: ArchiveFiles@2
        displayName: Gather assets
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/boon'
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: '$(Build.ArtifactStagingDirectory)/boon-latest-$(TARGET).tar.gz' # replace latest with my_tag
      - task: GithubRelease@0
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          gitHubConnection: 'camchenry'
          repositoryName: 'camchenry/boon'
          action: 'edit'
          target: '$(build.sourceVersion)'
          tagSource: 'manual'
          tag: '$(build.my_tag)'
          assets: '$(Build.ArtifactStagingDirectory)/boon-latest-$(TARGET).tar.gz'
          title: '$(build.my_tag)'
          assetUploadMode: 'replace'
          addChangeLog: false
